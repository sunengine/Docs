(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{224:function(t,s,e){"use strict";e.r(s);var n=e(28),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"пошаговое-руководство-по-установке-на-ubuntu-сервер"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#пошаговое-руководство-по-установке-на-ubuntu-сервер"}},[t._v("#")]),t._v(" Пошаговое руководство по установке на Ubuntu сервер")]),t._v(" "),e("h3",{attrs:{id:"устанавnиваем-asp-net-core-runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#устанавnиваем-asp-net-core-runtime"}},[t._v("#")]),t._v(" Устанавливаем Asp.Net Core Runtime.")]),t._v(" "),e("p",[t._v("Ссылка на инструкцию.")]),t._v(" "),e("h3",{attrs:{id:"добавnяем-репозиторий"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#добавnяем-репозиторий"}},[t._v("#")]),t._v(" Добавляем репозиторий:")]),t._v(" "),e("p",[t._v("wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb")]),t._v(" "),e("h3",{attrs:{id:"устанавnиваем"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#устанавnиваем"}},[t._v("#")]),t._v(" Устанавливаем:")]),t._v(" "),e("p",[t._v("sudo add-apt-repository universe\nsudo apt-get update\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install aspnetcore-runtime-3.1")]),t._v(" "),e("h3",{attrs:{id:"устанавnиваем-postgresql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#устанавnиваем-postgresql"}},[t._v("#")]),t._v(" Устанавливаем PostgreSql")]),t._v(" "),e("p",[t._v("Ссылка на инструкцию.")]),t._v(" "),e("h3",{attrs:{id:"устанавnиваем-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#устанавnиваем-2"}},[t._v("#")]),t._v(" Устанавливаем:")]),t._v(" "),e("p",[t._v("sudo apt-get install postgresql-11")]),t._v(" "),e("h3",{attrs:{id:"устанавnиваем-пароnь-дnя-поnьзоватеnя"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#устанавnиваем-пароnь-дnя-поnьзоватеnя"}},[t._v("#")]),t._v(" Устанавливаем пароль для пользователя:")]),t._v(" "),e("p",[t._v("sudo -u postgres psql")]),t._v(" "),e("p",[t._v("Открывается консоль postgres, набираем команду:")]),t._v(" "),e("p",[t._v("ALTER USER postgres PASSWORD 'postgres_user_password';")]),t._v(" "),e("p",[t._v('Вместо "postgres_user_password" необходимо задать пароль.')]),t._v(" "),e("p",[t._v('Cоздаём базу данных "my_site.com"')]),t._v(" "),e("p",[t._v("CREATE DATABASE my_site.com;")]),t._v(" "),e("h3",{attrs:{id:"собираем-проект-nокаnьно-и-записываем-на-сервер"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#собираем-проект-nокаnьно-и-записываем-на-сервер"}},[t._v("#")]),t._v(" Собираем проект локально и записываем на сервер")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('Скачиваем с репозитория код SunEngine на локальный компьютер.\nВсе скрипты сборки и публикации находятся в директории "Scripts/"\nВ директории "Scripts/" копируем файл "PUBLISH.template" в "PUBLISH" и редактируем его, настраивая все параметры\nСобираем проект выполнив скрипт - "build.sh" (появится папка "build" в корневом каталоге проекта)\nСоздаём на сервере папку "/site/my_site.com". Путь может быть любым.\nВыкладываем "build" на сервер, запуская скрипт "publish.sh"\nНа сервере редактируем файлы настроек в директории  "/site/my_site.com/Config" \n    Настройки подключения в "/Config/DataBaseConnection.json".\n')])])]),e("p",[t._v('{\n"DataBaseConnection": {'),e("br"),t._v('\n"Linq2dbProvider": "PostgreSQL.9.5",\n"FluentMigratorProvider": "Postgres",\n"ConnectionString": "Host=localhost;Database=my_site.com;Username=postgres;Password=postgres_user_password"\n}\n}')]),t._v(" "),e("p",[t._v('Заполняем базу данных начальными данными\nЗаходим в папку "/site/my_site.com/Server"')]),t._v(" "),e("h3",{attrs:{id:"запускаем"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#запускаем"}},[t._v("#")]),t._v(" Запускаем")]),t._v(" "),e("p",[t._v("dotnet SunEngine.dll init migrate")]),t._v(" "),e("p",[t._v('Эта команда создаёт таблицы и другие структуры в базе данных и заполняет начальными данными.\nПодробнее о командах "dotnet SunEngine.dll" в статье.\nСоздаём kestrel процесс на systemd\nСсылка на инструкцию.')]),t._v(" "),e("p",[t._v('systemd позволяет после старта сервера постоянно держать необходимые процессы запущенными, и перезапускать, если они вынужденно выключаются.\nСоздаём файл "my_site.com.service" в папке "/etc/systemd/system"')]),t._v(" "),e("p",[t._v("[Unit]\nDescription=SunEngine my_site.com")]),t._v(" "),e("p",[t._v("[Service]\nWorkingDirectory=/site/my_site.com\nExecStart=/usr/bin/dotnet /site/my_site.com/Server/SunEngine.dll server\nSyslogIdentifier=my_site.com\nUser=www-data\nRestart=always\nRestartSec=10\nKillSignal=SIGINT\nEnvironment=ASPNETCORE_ENVIRONMENT=Production")]),t._v(" "),e("p",[t._v("[Install]\nWantedBy=multi-user.target")]),t._v(" "),e("h3",{attrs:{id:"вкnючаем-процесс"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#вкnючаем-процесс"}},[t._v("#")]),t._v(" Включаем процесс:")]),t._v(" "),e("p",[t._v("systemctl enable my_site.com")]),t._v(" "),e("h3",{attrs:{id:"команды-которые-могут-пригодиться"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#команды-которые-могут-пригодиться"}},[t._v("#")]),t._v(" Команды которые могут пригодиться")]),t._v(" "),e("p",[t._v("Посмотреть логи:")]),t._v(" "),e("p",[t._v("journalctl -fxeu my_site.com")]),t._v(" "),e("p",[t._v("Перезапуск процесса:")]),t._v(" "),e("p",[t._v("systemctl restart my_site.com")]),t._v(" "),e("h3",{attrs:{id:"установка-nginx-веб-сервера"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#установка-nginx-веб-сервера"}},[t._v("#")]),t._v(" Установка Nginx веб сервера")]),t._v(" "),e("p",[t._v("Ссылка на инструкцию.")]),t._v(" "),e("p",[t._v("sudo apt-get update\nsudo apt-get install nginx")]),t._v(" "),e("p",[t._v("Создание Nginx конфигурации")]),t._v(" "),e("p",[t._v("Запуск на Nginx.")]),t._v(" "),e("p",[t._v('Создаём файл "/etc/nginx/sites-available/my_site.com"')]),t._v(" "),e("p",[t._v("server {\nlisten 443 http2; # https port\nlisten [::]:443 http2; # IP v6")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('server_name my_site.site; # домен\n\ncharset utf-8;\n\nssl on; # включаем ssl\nssl_certificate /etc/ssl/mysite.site/my_site.com.crt; # Путь к ssl сертификату\nssl_certificate_key /etc/ssl/mysite.site/my_site.com.key; # Путь к ключу сертификата\n\ngzip on; # включаем gzip архивацию потока данных\ngzip_buffers 16 8k;\ngzip_comp_level 6;\ngzip_http_version 1.1;\ngzip_min_length 256;\ngzip_proxied any;\ngzip_vary on;\ngzip_types text/xml application/atom+xml application/rss+xml application/xhtml+xml text/javascript application/javascript\n    application/x-javascript text/x-json application/json application/x-web-app-manifest+json text/css text/plain\n    text/html font/opentype application/x-font-ttf image/x-icon image/svg+xml;\ngzip_disable "msie6";\n\nadd_header X-Frame-Options "SAMEORIGIN";\nadd_header X-XSS-Protection "1; mode=block";\nadd_header X-Content-Type-Options "nosniff";\n\nlocation / { # Endpoint для клиентской части\n    root /site/my_site.com/wwwroot;\n    try_files $uri $uri/ /index.html; # если файл не найден - возвращаем index.html\n\n    open_file_cache max=1000 inactive=20s; # кеширование файлов клиента на сервере\n    open_file_cache_valid 30s;\n    open_file_cache_min_uses 2;\n    open_file_cache_errors on;\n}\n\nlocation ~ \\.(js|json|css|svg|svgz|eot|otf|woff|woff2|ttf|rss|atom|ico|jpg|jpeg|gif|png)$ {     # кеширование в браузере\n    expires 14d; # хранить кеш 14 дней\n}\n\nlocation /api/ { # Endpoint для серверной части. Работает как reverse proxy отправляя запросы в Kestrel работающим отдельным процессом.\n    proxy_pass http://localhost:5000/; # Порт должен соответствовать настройкам kestrel в "Config/SunEngine.json"\n    client_max_body_size 11M; # максимальный размер тела запроса, который допускает Nginx ~= максимальный размер для upload файла\n}\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("server { # редирект в случае входа через http\nlisten 80;\nlisten [::]:80;\nserver_name mysite.site;\nreturn 301 https://$host$request_uri;\n}")]),t._v(" "),e("p",[t._v("Активизируем настройки my_site.com:")]),t._v(" "),e("p",[t._v("sudo ln -s /etc/nginx/sites-available/my_site.com /etc/nginx/sites-enabled/my_site.com")]),t._v(" "),e("p",[t._v("Перезагружаем настройки Nginx:")]),t._v(" "),e("p",[t._v("sudo systemctl reload nginx")]),t._v(" "),e("h3",{attrs:{id:"метки"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#метки"}},[t._v("#")]),t._v(" Метки:")]),t._v(" "),e("p",[t._v("deploy")]),t._v(" "),e("p",[t._v("install")]),t._v(" "),e("p",[t._v("инсталляция")]),t._v(" "),e("p",[t._v("руководство")]),t._v(" "),e("p",[t._v("установка")]),t._v(" "),e("p",[t._v("установка с нуля")])])}),[],!1,null,null,null);s.default=a.exports}}]);